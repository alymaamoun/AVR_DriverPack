#ifndef INTERNAL_PERIPHERALS_TIMER_H_
#define INTERNAL_PERIPHERALS_TIMER_H_

#include "../std_types.h"


typedef enum{
	NOMRAL_TIMER0,PWM_PHASE_CORRECT_TIMER0,CTC_TIMER0,FAST_PWM_TIMER0
}WAVEFORM_GENERATION_MODE_TIMER0;

typedef enum{
	NORMAL_PORT_OPERATION_OC0_DISCONNECTED_TIMER0_CTC,TOGGLE_OC0_ON_COMPARE_MATCH_TIMER0,CLEAR_OC0_ON_COMPARE_MATCH,SET_OC0_ON_COMPARE_MATCH
}COMPRARE_OUTPUT_MODE_NON_PWM_MODE_TIMER0;

typedef enum{
	NORMAL_PORT_OPERATION_OC0_DISCONNECTED_TIMER0_PWM,xxx,CLEAR_OC0,SET_OC0
}COMPRARE_OUTPUT_MODE_FAST_PWM_MODE_TIMER0;

typedef enum{
	NO_CLK_TIMER,CLK_1_TIMER,CLK_8_TIMER,CLK_64_TIMER,CLK_256_TIMER,CLK_1024_TIMER,EXTERNAL_CLK_SOURCE_T0_FALLING_TIMER,EXTERNAL_CLK_SOURCE_T0_RISING_TIMER0
}PRESCALAR;

void TIMER0_normal(PRESCALAR prescalar,uint8 initial);
void TIMER0_ctc(PRESCALAR prescalar,uint8 compare,uint8 initial,COMPRARE_OUTPUT_MODE_NON_PWM_MODE_TIMER0 mode);
void TIMER0_pwm_init(PRESCALAR prescalar,COMPRARE_OUTPUT_MODE_FAST_PWM_MODE_TIMER0 mode);
void TIMER0_pwm(uint8 duty_cycle);
#endif /* INTERNAL_PERIPHERALS_TIMER_H_ */
